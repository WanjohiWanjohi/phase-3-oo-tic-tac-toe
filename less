
./lib/tic_tac_toe.rb
  TicTacToe
    #initialize
      assigns an instance variable @board to an array with 9 blank spaces " "
    WIN_COMBINATIONS
      defines a constant WIN_COMBINATIONS with arrays for each win combination
    #display_board
      prints arbitrary arrangements of the board
    #input_to_index
      accepts the user's input (a string) as an argument
      converts the user's input (a string) into an integer
      converts the user's input from the user-friendly format (on a 1-9 scale) to the array-friendly format (where the first index starts at 0)
    #move
      allows "X" player in the top left and "O" in the middle (FAILED - 1)
    #position_taken?
      returns true/false based on whether the position on the board is already occupied (FAILED - 2)
    #valid_move?
      returns true/false based on whether the position is already occupied (FAILED - 3)
      checks that the attempted move is within the bounds of the game board (FAILED - 4)
    #turn_count
      counts occupied positions
    #current_player
      returns the correct player, X, for the third move (FAILED - 5)
      returns the correct player, O, for the fourth move (FAILED - 6)
    #turn
      receives user input via the gets method (FAILED - 7)
      calls #input_to_index, #valid_move?, and #current_player (FAILED - 8)
      makes valid moves and displays the board (FAILED - 9)
      asks for input again after a failed validation (FAILED - 10)
    #won?
      returns false for a draw
      returns the winning combo for a win (FAILED - 11)
    #full?
      returns true for a draw (FAILED - 12)
      returns false for an in-progress game
    #draw?
      returns true for a draw (FAILED - 13)
      returns false for a won game (FAILED - 14)
      returns false for an in-progress game (FAILED - 15)
    #over?
      returns true for a draw (FAILED - 16)
      returns true for a won game (FAILED - 17)
      returns false for an in-progress game (FAILED - 18)
    #winner
      return X when X won (FAILED - 19)
      returns O when O won (FAILED - 20)
      returns nil when no winner (FAILED - 21)

./lib/tic_tac_toe.rb
  TicTacToe
    #play
      asks for players input on a turn of the game (FAILED - 22)
      checks if the game is over after every turn (FAILED - 23)
      plays the first turn of the game (FAILED - 24)
      plays the first few turns of the game (FAILED - 25)
      checks if the game is won after every turn (FAILED - 26)
      checks if the game is draw after every turn (FAILED - 27)
      stops playing if someone has won (FAILED - 28)
      congratulates the winner X (FAILED - 29)
      congratulates the winner O (FAILED - 30)
      stops playing in a draw (FAILED - 31)
      prints "Cat's Game!" on a draw (FAILED - 32)
      plays through an entire game (FAILED - 33)

bin/tictactoe
  instantiates an instance of TicTacToe (FAILED - 34)
  calls #play on the instance of TicTacToe (FAILED - 35)

Failures:

  1) ./lib/tic_tac_toe.rb TicTacToe#move allows "X" player in the top left and "O" in the middle
     Failure/Error: expect(board).to eq(["X", " ", " ", " ", "O", " ", " ", " ", " "])

       expected: ["X", " ", " ", " ", "O", " ", " ", " ", " "]
            got: [" ", " ", " ", " ", " ", " ", " ", " ", " "]

       (compared using ==)
     # ./spec/01_tic_tac_toe_spec.rb:81:in `block (4 levels) in <top (required)>'

  2) ./lib/tic_tac_toe.rb TicTacToe#position_taken? returns true/false based on whether the position on the board is already occupied
     Failure/Error: !(position(location).nil? || position(location) == "")

     NoMethodError:
       undefined method `position' for #<TicTacToe:0x00007ffff68db640>
       Did you mean?  position_taken?
     # ./lib/tic_tac_toe.rb:48:in `position_taken?'
     # ./spec/01_tic_tac_toe_spec.rb:92:in `block (4 levels) in <top (required)>'

  3) ./lib/tic_tac_toe.rb TicTacToe#valid_move? returns true/false based on whether the position is already occupied
     Failure/Error:
       def valid_move?
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./lib/tic_tac_toe.rb:52:in `valid_move?'
     # ./spec/01_tic_tac_toe_spec.rb:112:in `block (4 levels) in <top (required)>'

  4) ./lib/tic_tac_toe.rb TicTacToe#valid_move? checks that the attempted move is within the bounds of the game board
     Failure/Error:
       def valid_move?
       end

     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./lib/tic_tac_toe.rb:52:in `valid_move?'
     # ./spec/01_tic_tac_toe_spec.rb:121:in `block (4 levels) in <top (required)>'

  5) ./lib/tic_tac_toe.rb TicTacToe#current_player returns the correct player, X, for the third move
     Failure/Error: expect(game.current_player).to eq("X")

       expected: "X"
            got: nil

       (compared using ==)
     # ./spec/01_tic_tac_toe_spec.rb:146:in `block (4 levels) in <top (required)>'

  6) ./lib/tic_tac_toe.rb TicTacToe#current_player returns the correct player, O, for the fourth move
     Failure/Error: expect(game.current_player).to eq("O")

       expected: "O"
            got: nil

       (compared using ==)
     # ./spec/01_tic_tac_toe_spec.rb:154:in `block (4 levels) in <top (required)>'

  7) ./lib/tic_tac_toe.rb TicTacToe#turn receives user input via the gets method
     Failure/Error: expect(game).to receive(:gets).and_return("1")

       (#<TicTacToe:0x00007ffff5e293f0 @board=[" ", " ", " ", " ", " ", " ", " ", " ", " "]>).gets(*(any args))
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/01_tic_tac_toe_spec.rb:163:in `block (4 levels) in <top (required)>'

  8) ./lib/tic_tac_toe.rb TicTacToe#turn calls #input_to_index, #valid_move?, and #current_player
     Failure/Error: expect(game).to receive(:gets).and_return("5")

       (#<TicTacToe:0x00007ffff5bf1df8 @board=[" ", " ", " ", " ", " ", " ", " ", " ", " "]>).gets(*(any args))
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/01_tic_tac_toe_spec.rb:170:in `block (4 levels) in <top (required)>'

  9) ./lib/tic_tac_toe.rb TicTacToe#turn makes valid moves and displays the board
     Failure/Error: expect(board).to eq(["X", " ", " ", " ", " ", " ", " ", " ", " "])

       expected: ["X", " ", " ", " ", " ", " ", " ", " ", " "]
            got: [" ", " ", " ", " ", " ", " ", " ", " ", " "]

       (compared using ==)
     # ./spec/01_tic_tac_toe_spec.rb:186:in `block (4 levels) in <top (required)>'

  10) ./lib/tic_tac_toe.rb TicTacToe#turn asks for input again after a failed validation
      Failure/Error: expect(game).to receive(:gets).and_return("invalid")

        (#<TicTacToe:0x00007ffff690a288 @board=[" ", " ", " ", " ", " ", " ", " ", " ", " "]>).gets(*(any args))
            expected: 1 time with any arguments
            received: 0 times with any arguments
      # ./spec/01_tic_tac_toe_spec.rb:193:in `block (4 levels) in <top (required)>'

  11) ./lib/tic_tac_toe.rb TicTacToe#won? returns the winning combo for a win
      Failure/Error:
        def position_taken?(location)
          !(position(location).nil? || position(location) == "")
        
        end

      ArgumentError:
        wrong number of arguments (given 2, expected 1)
      # ./lib/tic_tac_toe.rb:47:in `position_taken?'
      # ./lib/tic_tac_toe.rb:40:in `block in won?'
      # ./lib/tic_tac_toe.rb:31:in `each'
      # ./lib/tic_tac_toe.rb:31:in `won?'
      # ./spec/01_tic_tac_toe_spec.rb:214:in `block (4 levels) in <top (required)>'

  12) ./lib/tic_tac_toe.rb TicTacToe#full? returns true for a draw
      Failure/Error: expect(game.full?).to be_truthy

        expected: truthy value
             got: nil
      # ./spec/01_tic_tac_toe_spec.rb:224:in `block (4 levels) in <top (required)>'

  13) ./lib/tic_tac_toe.rb TicTacToe#draw? returns true for a draw
      Failure/Error: expect(game.draw?).to be_truthy

      NoMethodError:
        undefined method `draw?' for #<TicTacToe:0x00007ffff689d778>
      # ./spec/01_tic_tac_toe_spec.rb:242:in `block (4 levels) in <top (required)>'

  14) ./lib/tic_tac_toe.rb TicTacToe#draw? returns false for a won game
      Failure/Error: expect(game.draw?).to be_falsey

      NoMethodError:
        undefined method `draw?' for #<TicTacToe:0x00007ffff689c2d8>
      # ./spec/01_tic_tac_toe_spec.rb:250:in `block (4 levels) in <top (required)>'

  15) ./lib/tic_tac_toe.rb TicTacToe#draw? returns false for an in-progress game
      Failure/Error: expect(game.draw?).to be_falsey

      NoMethodError:
        undefined method `draw?' for #<TicTacToe:0x00007ffff68c67b8>
      # ./spec/01_tic_tac_toe_spec.rb:258:in `block (4 levels) in <top (required)>'

  16) ./lib/tic_tac_toe.rb TicTacToe#over? returns true for a draw
      Failure/Error: expect(game.over?).to be_truthy

      NoMethodError:
        undefined method `over?' for #<TicTacToe:0x00007ffff68c48f0>
      # ./spec/01_tic_tac_toe_spec.rb:268:in `block (4 levels) in <top (required)>'

  17) ./lib/tic_tac_toe.rb TicTacToe#over? returns true for a won game
      Failure/Error: expect(game.over?).to be_truthy

      NoMethodError:
        undefined method `over?' for #<TicTacToe:0x00007ffff68ab350>
      # ./spec/01_tic_tac_toe_spec.rb:276:in `block (4 levels) in <top (required)>'

  18) ./lib/tic_tac_toe.rb TicTacToe#over? returns false for an in-progress game
      Failure/Error: expect(game.over?).to be_falsey

      NoMethodError:
        undefined method `over?' for #<TicTacToe:0x00007ffff68a9820>
      # ./spec/01_tic_tac_toe_spec.rb:284:in `block (4 levels) in <top (required)>'

  19) ./lib/tic_tac_toe.rb TicTacToe#winner return X when X won
      Failure/Error: expect(game.winner).to eq("X")

      NoMethodError:
        undefined method `winner' for #<TicTacToe:0x00007ffff687f340>
      # ./spec/01_tic_tac_toe_spec.rb:294:in `block (4 levels) in <top (required)>'

  20) ./lib/tic_tac_toe.rb TicTacToe#winner returns O when O won
      Failure/Error: expect(game.winner).to eq("O")

      NoMethodError:
        undefined method `winner' for #<TicTacToe:0x00007ffff687dec8>
      # ./spec/01_tic_tac_toe_spec.rb:302:in `block (4 levels) in <top (required)>'

  21) ./lib/tic_tac_toe.rb TicTacToe#winner returns nil when no winner
      Failure/Error: expect(game.winner).to be_nil

      NoMethodError:
        undefined method `winner' for #<TicTacToe:0x00007ffff687ca28>
      # ./spec/01_tic_tac_toe_spec.rb:310:in `block (4 levels) in <top (required)>'

  22) ./lib/tic_tac_toe.rb TicTacToe#play asks for players input on a turn of the game
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff6895438>
      # ./spec/02_play_spec.rb:13:in `block (4 levels) in <top (required)>'

  23) ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is over after every turn
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff6855090>
      # ./spec/02_play_spec.rb:23:in `block (4 levels) in <top (required)>'

  24) ./lib/tic_tac_toe.rb TicTacToe#play plays the first turn of the game
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff682bc68>
      # ./spec/02_play_spec.rb:33:in `block (4 levels) in <top (required)>'

  25) ./lib/tic_tac_toe.rb TicTacToe#play plays the first few turns of the game
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff6872708>
      # ./spec/02_play_spec.rb:45:in `block (4 levels) in <top (required)>'

  26) ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is won after every turn
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff68262e0>
      # ./spec/02_play_spec.rb:59:in `block (4 levels) in <top (required)>'

  27) ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is draw after every turn
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff6820ed0>
      # ./spec/02_play_spec.rb:69:in `block (4 levels) in <top (required)>'

  28) ./lib/tic_tac_toe.rb TicTacToe#play stops playing if someone has won
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff68008b0>
      # ./spec/02_play_spec.rb:81:in `block (4 levels) in <top (required)>'

  29) ./lib/tic_tac_toe.rb TicTacToe#play congratulates the winner X
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff67fd700>
      # ./spec/02_play_spec.rb:92:in `block (4 levels) in <top (required)>'

  30) ./lib/tic_tac_toe.rb TicTacToe#play congratulates the winner O
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff67ef060>
      # ./spec/02_play_spec.rb:104:in `block (4 levels) in <top (required)>'

  31) ./lib/tic_tac_toe.rb TicTacToe#play stops playing in a draw
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff67e7900>
      # ./spec/02_play_spec.rb:115:in `block (4 levels) in <top (required)>'

  32) ./lib/tic_tac_toe.rb TicTacToe#play prints "Cat's Game!" on a draw
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff67e4728>
      # ./spec/02_play_spec.rb:126:in `block (4 levels) in <top (required)>'

  33) ./lib/tic_tac_toe.rb TicTacToe#play plays through an entire game
      Failure/Error: game.play

      NoMethodError:
        undefined method `play' for #<TicTacToe:0x00007ffff67e1d70>
      # ./spec/02_play_spec.rb:143:in `block (4 levels) in <top (required)>'

  34) bin/tictactoe instantiates an instance of TicTacToe
      Failure/Error: expect(TicTacToe).to receive(:new).and_return(game)

        (TicTacToe (class)).new(*(any args))
            expected: 1 time with any arguments
            received: 0 times with any arguments
      # ./spec/03_cli_spec.rb:8:in `block (2 levels) in <top (required)>'

  35) bin/tictactoe calls #play on the instance of TicTacToe
      Failure/Error: expect(TicTacToe).to receive(:new).and_return(game)

        (TicTacToe (class)).new(*(any args))
            expected: 1 time with any arguments
            received: 0 times with any arguments
      # ./spec/03_cli_spec.rb:17:in `block (2 levels) in <top (required)>'

Finished in 0.38387 seconds (files took 0.22569 seconds to load)
44 examples, 35 failures

Failed examples:

rspec ./spec/01_tic_tac_toe_spec.rb:74 # ./lib/tic_tac_toe.rb TicTacToe#move allows "X" player in the top left and "O" in the middle
rspec ./spec/01_tic_tac_toe_spec.rb:86 # ./lib/tic_tac_toe.rb TicTacToe#position_taken? returns true/false based on whether the position on the board is already occupied
rspec ./spec/01_tic_tac_toe_spec.rb:106 # ./lib/tic_tac_toe.rb TicTacToe#valid_move? returns true/false based on whether the position is already occupied
rspec ./spec/01_tic_tac_toe_spec.rb:118 # ./lib/tic_tac_toe.rb TicTacToe#valid_move? checks that the attempted move is within the bounds of the game board
rspec ./spec/01_tic_tac_toe_spec.rb:141 # ./lib/tic_tac_toe.rb TicTacToe#current_player returns the correct player, X, for the third move
rspec ./spec/01_tic_tac_toe_spec.rb:149 # ./lib/tic_tac_toe.rb TicTacToe#current_player returns the correct player, O, for the fourth move
rspec ./spec/01_tic_tac_toe_spec.rb:161 # ./lib/tic_tac_toe.rb TicTacToe#turn receives user input via the gets method
rspec ./spec/01_tic_tac_toe_spec.rb:168 # ./lib/tic_tac_toe.rb TicTacToe#turn calls #input_to_index, #valid_move?, and #current_player
rspec ./spec/01_tic_tac_toe_spec.rb:178 # ./lib/tic_tac_toe.rb TicTacToe#turn makes valid moves and displays the board
rspec ./spec/01_tic_tac_toe_spec.rb:189 # ./lib/tic_tac_toe.rb TicTacToe#turn asks for input again after a failed validation
rspec ./spec/01_tic_tac_toe_spec.rb:209 # ./lib/tic_tac_toe.rb TicTacToe#won? returns the winning combo for a win
rspec ./spec/01_tic_tac_toe_spec.rb:219 # ./lib/tic_tac_toe.rb TicTacToe#full? returns true for a draw
rspec ./spec/01_tic_tac_toe_spec.rb:237 # ./lib/tic_tac_toe.rb TicTacToe#draw? returns true for a draw
rspec ./spec/01_tic_tac_toe_spec.rb:245 # ./lib/tic_tac_toe.rb TicTacToe#draw? returns false for a won game
rspec ./spec/01_tic_tac_toe_spec.rb:253 # ./lib/tic_tac_toe.rb TicTacToe#draw? returns false for an in-progress game
rspec ./spec/01_tic_tac_toe_spec.rb:263 # ./lib/tic_tac_toe.rb TicTacToe#over? returns true for a draw
rspec ./spec/01_tic_tac_toe_spec.rb:271 # ./lib/tic_tac_toe.rb TicTacToe#over? returns true for a won game
rspec ./spec/01_tic_tac_toe_spec.rb:279 # ./lib/tic_tac_toe.rb TicTacToe#over? returns false for an in-progress game
rspec ./spec/01_tic_tac_toe_spec.rb:289 # ./lib/tic_tac_toe.rb TicTacToe#winner return X when X won
rspec ./spec/01_tic_tac_toe_spec.rb:297 # ./lib/tic_tac_toe.rb TicTacToe#winner returns O when O won
rspec ./spec/01_tic_tac_toe_spec.rb:305 # ./lib/tic_tac_toe.rb TicTacToe#winner returns nil when no winner
rspec ./spec/02_play_spec.rb:6 # ./lib/tic_tac_toe.rb TicTacToe#play asks for players input on a turn of the game
rspec ./spec/02_play_spec.rb:16 # ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is over after every turn
rspec ./spec/02_play_spec.rb:26 # ./lib/tic_tac_toe.rb TicTacToe#play plays the first turn of the game
rspec ./spec/02_play_spec.rb:38 # ./lib/tic_tac_toe.rb TicTacToe#play plays the first few turns of the game
rspec ./spec/02_play_spec.rb:51 # ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is won after every turn
rspec ./spec/02_play_spec.rb:62 # ./lib/tic_tac_toe.rb TicTacToe#play checks if the game is draw after every turn
rspec ./spec/02_play_spec.rb:72 # ./lib/tic_tac_toe.rb TicTacToe#play stops playing if someone has won
rspec ./spec/02_play_spec.rb:84 # ./lib/tic_tac_toe.rb TicTacToe#play congratulates the winner X
rspec ./spec/02_play_spec.rb:95 # ./lib/tic_tac_toe.rb TicTacToe#play congratulates the winner O
rspec ./spec/02_play_spec.rb:107 # ./lib/tic_tac_toe.rb TicTacToe#play stops playing in a draw
rspec ./spec/02_play_spec.rb:118 # ./lib/tic_tac_toe.rb TicTacToe#play prints "Cat's Game!" on a draw
rspec ./spec/02_play_spec.rb:129 # ./lib/tic_tac_toe.rb TicTacToe#play plays through an entire game
rspec ./spec/03_cli_spec.rb:2 # bin/tictactoe instantiates an instance of TicTacToe
rspec ./spec/03_cli_spec.rb:13 # bin/tictactoe calls #play on the instance of TicTacToe

